//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputAction/InputAttackScythe.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAttackScythe : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAttackScythe()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAttackScythe"",
    ""maps"": [
        {
            ""name"": ""Attack"",
            ""id"": ""eefc796d-7fda-4a35-9496-a8893affe5f3"",
            ""actions"": [
                {
                    ""name"": ""Attack_Q"",
                    ""type"": ""Button"",
                    ""id"": ""2e35e798-128c-4446-bf50-32914f6a489b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack_E"",
                    ""type"": ""Button"",
                    ""id"": ""41c9bd13-17af-4a0f-ad8b-b1f10cc23425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""61def330-c1e0-46f5-a623-65f37295a80d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""048f94b9-d04e-4b32-a912-b2caa2d3c868"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25a2d06b-0e40-4f91-bcfe-1f28350d84e9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4440c00d-3d01-4113-9ebf-6fd2b0877103"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Attack_Q = m_Attack.FindAction("Attack_Q", throwIfNotFound: true);
        m_Attack_Attack_E = m_Attack.FindAction("Attack_E", throwIfNotFound: true);
        m_Attack_Shift = m_Attack.FindAction("Shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Attack
    private readonly InputActionMap m_Attack;
    private IAttackActions m_AttackActionsCallbackInterface;
    private readonly InputAction m_Attack_Attack_Q;
    private readonly InputAction m_Attack_Attack_E;
    private readonly InputAction m_Attack_Shift;
    public struct AttackActions
    {
        private @InputAttackScythe m_Wrapper;
        public AttackActions(@InputAttackScythe wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack_Q => m_Wrapper.m_Attack_Attack_Q;
        public InputAction @Attack_E => m_Wrapper.m_Attack_Attack_E;
        public InputAction @Shift => m_Wrapper.m_Attack_Shift;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void SetCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterface != null)
            {
                @Attack_Q.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_Q;
                @Attack_Q.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_Q;
                @Attack_Q.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_Q;
                @Attack_E.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_E;
                @Attack_E.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_E;
                @Attack_E.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnAttack_E;
                @Shift.started -= m_Wrapper.m_AttackActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_AttackActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_AttackActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_AttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack_Q.started += instance.OnAttack_Q;
                @Attack_Q.performed += instance.OnAttack_Q;
                @Attack_Q.canceled += instance.OnAttack_Q;
                @Attack_E.started += instance.OnAttack_E;
                @Attack_E.performed += instance.OnAttack_E;
                @Attack_E.canceled += instance.OnAttack_E;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
            }
        }
    }
    public AttackActions @Attack => new AttackActions(this);
    public interface IAttackActions
    {
        void OnAttack_Q(InputAction.CallbackContext context);
        void OnAttack_E(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
}
